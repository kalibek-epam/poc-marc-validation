package com.epam.validation.marc.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Base MARC record for QuickMARC
 */

@Schema(name = "baseMarcRecord", description = "Base MARC record for QuickMARC")
@JsonIgnoreProperties(
  value = "_actionType", // ignore manually set _actionType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the _actionType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_actionType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = QuickMarcCreate.class, name = "create"),
  @JsonSubTypes.Type(value = QuickMarcEdit.class, name = "edit"),
  @JsonSubTypes.Type(value = QuickMarcView.class, name = "view")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-11T18:27:36.277406700+06:00[Asia/Almaty]")
public class BaseMarcRecord {

  private String leader;

  @Valid
  private List<@Valid FieldItem> fields = new ArrayList<>();

  private Boolean suppressDiscovery = false;

  private MarcFormat marcFormat;

  public BaseMarcRecord leader(String leader) {
    this.leader = leader;
    return this;
  }

  /**
   * MARC record's leader
   * @return leader
  */
  @NotNull @Size(min = 24, max = 24) 
  @Schema(name = "leader", description = "MARC record's leader", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("leader")
  public String getLeader() {
    return leader;
  }

  public void setLeader(String leader) {
    this.leader = leader;
  }

  public BaseMarcRecord fields(List<@Valid FieldItem> fields) {
    this.fields = fields;
    return this;
  }

  public BaseMarcRecord addFieldsItem(FieldItem fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * MARC record's fields
   * @return fields
  */
  @NotNull @Valid 
  @Schema(name = "fields", description = "MARC record's fields", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("fields")
  public List<@Valid FieldItem> getFields() {
    return fields;
  }

  public void setFields(List<@Valid FieldItem> fields) {
    this.fields = fields;
  }

  public BaseMarcRecord suppressDiscovery(Boolean suppressDiscovery) {
    this.suppressDiscovery = suppressDiscovery;
    return this;
  }

  /**
   * Flag indicates if the record is displayed during a search
   * @return suppressDiscovery
  */
  
  @Schema(name = "suppressDiscovery", description = "Flag indicates if the record is displayed during a search", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("suppressDiscovery")
  public Boolean getSuppressDiscovery() {
    return suppressDiscovery;
  }

  public void setSuppressDiscovery(Boolean suppressDiscovery) {
    this.suppressDiscovery = suppressDiscovery;
  }

  public BaseMarcRecord marcFormat(MarcFormat marcFormat) {
    this.marcFormat = marcFormat;
    return this;
  }

  /**
   * Get marcFormat
   * @return marcFormat
  */
  @NotNull @Valid 
  @Schema(name = "marcFormat", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("marcFormat")
  public MarcFormat getMarcFormat() {
    return marcFormat;
  }

  public void setMarcFormat(MarcFormat marcFormat) {
    this.marcFormat = marcFormat;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseMarcRecord baseMarcRecord = (BaseMarcRecord) o;
    return Objects.equals(this.leader, baseMarcRecord.leader) &&
        Objects.equals(this.fields, baseMarcRecord.fields) &&
        Objects.equals(this.suppressDiscovery, baseMarcRecord.suppressDiscovery) &&
        Objects.equals(this.marcFormat, baseMarcRecord.marcFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leader, fields, suppressDiscovery, marcFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseMarcRecord {\n");
    sb.append("    leader: ").append(toIndentedString(leader)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    suppressDiscovery: ").append(toIndentedString(suppressDiscovery)).append("\n");
    sb.append("    marcFormat: ").append(toIndentedString(marcFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

